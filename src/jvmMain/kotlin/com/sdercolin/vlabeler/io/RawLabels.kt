package com.sdercolin.vlabeler.io

import com.sdercolin.vlabeler.env.Log
import com.sdercolin.vlabeler.env.isDebug
import com.sdercolin.vlabeler.model.Entry
import com.sdercolin.vlabeler.model.LabelerConf
import com.sdercolin.vlabeler.model.ModuleDefinition
import com.sdercolin.vlabeler.model.Project
import com.sdercolin.vlabeler.model.postApplyLabelerConf
import com.sdercolin.vlabeler.util.JavaScript
import com.sdercolin.vlabeler.util.ParamMap
import com.sdercolin.vlabeler.util.Resources
import com.sdercolin.vlabeler.util.execResource
import com.sdercolin.vlabeler.util.matchGroups
import com.sdercolin.vlabeler.util.readTextByEncoding
import com.sdercolin.vlabeler.util.replaceWithVariables
import com.sdercolin.vlabeler.util.resolve
import com.sdercolin.vlabeler.util.roundToDecimalDigit
import java.io.File

/**
 * Create a list of entry from raw labels.
 *
 * @param sources The raw labels.
 * @param inputFile The input file. Could be null, which means the raw labels are generated by a template plugin.
 * @param labelerConf The labeler.
 * @param labelerParams The labeler parameters.
 * @param sampleFiles The sample files.
 * @param encoding The encoding of the input file, passed to the JavaScript environment.
 */
fun moduleFromRawLabels(
    sources: List<String>,
    inputFile: File?,
    labelerConf: LabelerConf,
    labelerParams: ParamMap,
    sampleFiles: List<File>,
    encoding: String,
): List<Entry> {
    val parser = labelerConf.parser
    val extractor = Regex(parser.extractionPattern)
    val inputFileNames = listOfNotNull(inputFile?.name)
    val sampleFileNames = sampleFiles.map { it.name }
    val js = prepareJsForParsing(labelerParams, inputFileNames, sampleFileNames, encoding)
    val entries = sources.mapIndexedNotNull { index, source ->
        if (source.isBlank()) return@mapIndexedNotNull null
        val errorMessageSuffix = "in file ${inputFile?.absolutePath}, line ${index + 1}: $source"
        runCatching {
            val groups = source.matchGroups(extractor)
            require(groups.size >= parser.variableNames.size) {
                "Extracted groups less than required $errorMessageSuffix"
            }

            parser.variableNames.mapIndexed { i, name ->
                js.set(name, groups.getOrNull(i))
            }
            val script = parser.scripts.joinToString("\n")
            js.eval(script)
            js.getJson<Entry>("entry")
        }.getOrElse {
            Log.debug(it)
            null
        }
    }

    js.close()

    return entries.postApplyLabelerConf(labelerConf)
}

/**
 * Create a list of entry list from a group of module definitions. The items in the group should have same contents
 * expect the module name. This is typically used when multiple modules are linked to a single raw label file, such as
 * TextGrid usages.
 *
 * @param definitionGroup The module definitions.
 * @param labelerConf The labeler.
 * @param labelerParams The labeler parameters.
 * @param encoding The encoding of the input file, passed to the JavaScript environment.
 */
fun moduleGroupFromRawLabels(
    definitionGroup: List<ModuleDefinition>,
    labelerConf: LabelerConf,
    labelerParams: ParamMap,
    encoding: String,
): List<List<Entry>> {
    val inputFileNames = definitionGroup.first().inputFiles.orEmpty().map { it.name }
    val sampleFileNames = definitionGroup.first().sampleFiles.map { it.name }

    if (inputFileNames.isEmpty()) {
        // No input files, fallback to default values
        return definitionGroup.map {
            sampleFileNames.map { sampleName ->
                Entry.fromDefaultValues(sampleName, sampleName.substringBeforeLast('.'), labelerConf)
            }
        }
    }

    val js = prepareJsForParsing(labelerParams, inputFileNames, sampleFileNames, encoding)
    val inputs = requireNotNull(definitionGroup.first().inputFiles).map { it.readTextByEncoding(encoding).lines() }
    js.setJson("moduleNames", definitionGroup.map { it.name })
    js.setJson("inputs", inputs)

    val script = labelerConf.parser.scripts.joinToString("\n")
    js.eval(script)

    val result = js.getJson<List<List<Entry>>>("modules")
    js.close()

    return result
}

private fun prepareJsForParsing(
    labelerParams: ParamMap,
    inputFileNames: List<String>,
    sampleFileNames: List<String>,
    encoding: String,
): JavaScript {
    val js = JavaScript()
    listOf(
        Resources.classEntryJs,
        Resources.expectedErrorJs,
        Resources.envJs,
        Resources.fileJs,
    ).forEach { js.execResource(it) }
    js.set("debug", isDebug)
    js.setJson("params", labelerParams.resolve(project = null, js = js))
    js.setJson("inputFileNames", inputFileNames)
    js.setJson("sampleFileNames", sampleFileNames)
    js.set("encoding", encoding)
    return js
}

/**
 * Create raw labels from a group of modules. This is typically used when multiple modules are linked to a single raw
 * label file, such as TextGrid usages.
 *
 * @param moduleIndexes The indexes of the modules.
 */
fun Project.modulesToRawLabels(moduleIndexes: List<Int>): String {
    val js = prepareJsForWriting()
    val relatedModules = moduleIndexes.map { modules[it] }
    js.setJson("moduleNames", relatedModules.map { it.name })
    js.setJson("modules", relatedModules.map { it.entries })
    val scripts = labelerConf.writer.scripts
    requireNotNull(scripts) { "Writer scripts are required when scope is Scope.Modules" }

    js.eval(scripts.joinToString("\n"))
    val result = js.get<String>("output")
    js.close()
    return result
}

/**
 * Create raw labels from a single module.
 *
 * @param moduleIndex The index of the module.
 */
fun Project.singleModuleToRawLabels(moduleIndex: Int): String {
    val js = prepareJsForWriting()
    val lines = modules[moduleIndex].entries
        .map { entry ->
            val fields = labelerConf.getFieldMap(entry)
            val extras = labelerConf.getExtraMap(entry)
            val properties = labelerConf.getPropertyMap(entry, fields, extras, js)
            val variables: Map<String, Any> =
                fields.mapValues { (it.value as? Float)?.roundToDecimalDigit(labelerConf.decimalDigit) ?: it.value } +
                    // if a name is shared in fields and properties, its value will be overwritten by properties
                    // See source of Kotlin's `fun Map<out K, V>.plus(map: Map<out K, V>)`
                    properties.mapValues { it.value.roundToDecimalDigit(labelerConf.decimalDigit) } +
                    extras +
                    mapOf(
                        "sample" to entry.sample,
                        "name" to entry.name,
                    )
            val scripts = labelerConf.writer.scripts
            if (scripts != null) {
                for (variable in variables) {
                    js.set(variable.key, variable.value)
                }
                js.eval(scripts.joinToString("\n"))
                js.get("output")
            } else {
                val format = labelerConf.writer.format!!
                format.replaceWithVariables(variables)
            }
        }
    js.close()
    return lines.joinToString("\n")
}

private fun Project.prepareJsForWriting(): JavaScript {
    val js = JavaScript()
    listOf(
        Resources.classEntryJs,
        Resources.expectedErrorJs,
        Resources.envJs,
        Resources.fileJs,
    ).forEach { js.execResource(it) }
    js.set("debug", isDebug)
    js.setJson("params", labelerParams.resolve(labelerConf).resolve(project = null, js = js))
    return js
}

private fun LabelerConf.getFieldMap(entry: Entry) =
    mapOf(
        "start" to entry.start,
        "end" to entry.end,
        "needSync" to entry.needSync,
    ) + fields.mapIndexed { index, field ->
        field.name to entry.points[index]
    }.toMap()

private fun LabelerConf.getExtraMap(entry: Entry) = extraFieldNames.mapIndexed { index, name ->
    name to entry.extras[index]
}.toMap()

private fun LabelerConf.getPropertyBaseMap(
    entry: Entry,
    fields: Map<String, Any>,
    extras: Map<String, String>,
    js: JavaScript,
) =
    properties.associateWith {
        if (it.valueGetter != null) {
            js.setJson("entry", entry)
            js.eval(it.valueGetter.joinToString("\n"))
            js.get<Double>("value").roundToDecimalDigit(decimalDigit)
        } else {
            requireNotNull(it.value)
            // for backward compatibility
            val expression = it.value.replaceWithVariables(fields + extras)
            js.eval(expression)!!.asDouble()
        }
    }

private fun LabelerConf.getPropertyMap(
    entry: Entry,
    fields: Map<String, Any>,
    extras: Map<String, String>,
    js: JavaScript,
) = getPropertyBaseMap(entry, fields, extras, js).mapKeys { it.key.name }

/**
 * Get a map of property names and values for a given entry.
 */
fun LabelerConf.getPropertyMap(
    entry: Entry,
    js: JavaScript,
): Map<LabelerConf.Property, Double> =
    getPropertyBaseMap(entry, getFieldMap(entry), getExtraMap(entry), js)

/**
 * Get a property value for a given entry.
 */
fun LabelerConf.getPropertyValue(property: LabelerConf.Property, entry: Entry, js: JavaScript): Double? =
    getPropertyBaseMap(entry, getFieldMap(entry), getExtraMap(entry), js)[property]
