{
  "name": "oto-plus.default",
  "version": 24,
  "serialVersion": 1,
  "extension": "ini",
  "defaultInputFilePath": "oto.ini",
  "displayedName": {
    "en": "UTAU oto labeler",
    "zh": "UTAU oto 标注器",
    "ja": "UTAU oto ラベラー"
  },
  "author": "sdercolin",
  "email": "sder.colin@gmail.com",
  "description": {
    "en": "Default labeler for UTAU oto.",
    "zh": "用于 UTAU oto 的默认标注器。",
    "ja": "UTAU oto のデフォルトラベラー。"
  },
  "website": "https://github.com/sdercolin/vlabeler/tree/main/resources/common/labelers",
  "categoryTag": "UTAU",
  "displayOrder": 1,
  "defaultValues": [
    100,
    400,
    300,
    200,
    100,
    500
  ],
  "fields": [
    {
      "name": "fixed",
      "label": {
        "en": "Fixed",
        "zh": "固",
        "ja": "子"
      },
      "color": "#1b51ff",
      "height": 0.5,
      "dragBase": false,
      "filling": "left",
      "constraints": [
        {
          "min": 3,
          "max": null
        }
      ],
      "shortcutIndex": 3,
      "triggerPostEditDone": true
    },
    {
      "name": "preu",
      "label": {
        "en": "Preu",
        "zh": "先",
        "ja": "先"
      },
      "color": "#ff1a45",
      "height": 0.6667,
      "dragBase": true,
      "filling": null,
      "constraints": [
        {
          "min": 3,
          "max": 0
        }
      ],
      "shortcutIndex": 2,
      "triggerPostEditDone": true
    },
    {
      "name": "ovl",
      "label": {
        "en": "Ovl",
        "zh": "重",
        "ja": "オ"
      },
      "color": "#7fff39",
      "height": 0.8333,
      "dragBase": false,
      "filling": null,
      "constraints": [
        {
          "min": null,
          "max": 0
        }
      ],
      "shortcutIndex": 1,
      "triggerPostEditDone": true
    },
    {
      "name": "left",
      "label": {
        "en": "Left",
        "zh": "左",
        "ja": "左"
      },
      "color": "#9c7212",
      "height": 0.9,
      "dragBase": false,
      "filling": "start",
      "constraints": [],
      "replaceStart": true
    }
  ],
  "extraFields": [
    {
      "name": "rawRight",
      "displayedName": "Raw right",
      "default": "500"
    }
  ],
  "extraFieldNames": [
    "rawRight"
  ],
  "lockedDrag": {
    "useDragBase": true,
    "useStart": false
  },
  "overflowBeforeStart": "AdjustPoint",
  "overflowAfterEnd": "AdjustBorder",
  "postEditDoneTrigger": {
    "useStart": true,
    "useEnd": true
  },
  "properties": [
    {
      "name": "left",
      "displayedName": {
        "en": "Offset",
        "zh": "左边界",
        "ja": "左ブランク"
      },
      "valueGetter": [
        "value = entry.points[3]"
      ],
      "valueSetter": [
        "entry.points[3] = value",
        "if (value < entry.start) {",
        "    entry.start = value",
        "}"
      ],
      "shortcutIndex": 0
    },
    {
      "name": "ovl",
      "displayedName": {
        "en": "Overlap",
        "zh": "重叠",
        "ja": "オーバーラップ"
      },
      "valueGetter": [
        "value = entry.points[2] - entry.points[3]"
      ],
      "valueSetter": [
        "newOverlap = value + entry.points[3]",
        "entry.points[2] = newOverlap",
        "if (newOverlap < entry.start) {",
        "    entry.start = newOverlap",
        "}"
      ],
      "shortcutIndex": 1
    },
    {
      "name": "preu",
      "displayedName": {
        "en": "Preutterance",
        "zh": "先行发声",
        "ja": "先行発声"
      },
      "valueGetter": [
        "value = entry.points[1] - entry.points[3]"
      ],
      "valueSetter": [
        "entry.points[1] = value + entry.points[3]"
      ],
      "shortcutIndex": 2
    },
    {
      "name": "fixed",
      "displayedName": {
        "en": "Fixed",
        "zh": "固定",
        "ja": "固定範囲"
      },
      "valueGetter": [
        "value = entry.points[0] - entry.points[3]"
      ],
      "valueSetter": [
        "entry.points[0] = value + entry.points[3]"
      ],
      "shortcutIndex": 3
    },
    {
      "name": "right",
      "displayedName": {
        "en": "Cutoff",
        "zh": "右边界",
        "ja": "右ブランク"
      },
      "valueGetter": [
        "if(entry.needSync || entry.end < 0) {",
        "    value = parseFloat(entry.extras[0])",
        "} else {",
        "    value = entry.points[3] - entry.end",
        "}"
      ],
      "valueSetter": [
        "if(value < 0) {",
        "    entry.end = -value + entry.points[3]",
        "} else {",
        "    entry.needSync = true",
        "    entry.end = -value",
        "    entry.extras[0] = value.toString()",
        "}"
      ],
      "shortcutIndex": 4
    }
  ],
  "parser": {
    "scope": "Entry",
    "defaultEncoding": "Shift-JIS",
    "extractionPattern": "(.*)=(.*),(.*),(.*),(.*),(.*),(.*)",
    "variableNames": [
      "sample",
      "name",
      "left",
      "fixed",
      "right",
      "preu",
      "ovl"
    ],
    "scripts": [
      "if (typeof sample === 'undefined' || !sample) {",
      "    error('Sample name is empty.')",
      "}",
      "if (typeof sample === 'name' || !name) {",
      "    name = getNameWithoutExtension(sample)",
      "}",
      "offset = 0",
      "if (ovl === '') {",
      "    ovl = '0'",
      "}",
      "ovl = parseFloat(ovl)",
      "if (ovl < 0) {",
      "    offset = -ovl",
      "}",
      "if (left === '') {",
      "    left = '0'",
      "}",
      "left = parseFloat(left)",
      "start = left - offset",
      "points = []",
      "extras = []",
      "if (fixed === '') {",
      "    fixed = '0'",
      "}",
      "fixed = parseFloat(fixed)",
      "if (fixed < 0) {",
      "    fixed = 0",
      "}",
      "points.push(fixed + left)",
      "if (right === '') {",
      "    right = '0'",
      "}",
      "right = parseFloat(right)",
      "rawRight = right // for restoring from a non-negative value (distance to sample end)",
      "extras.push(rawRight)",
      "if (right < 0) {",
      "    end = left - right",
      "} else {",
      "    end = -right",
      "}",
      "if (preu === '') {",
      "    preu = '0'",
      "}",
      "preu = parseFloat(preu)",
      "if (preu < 0) {",
      "    preu = 0",
      "}",
      "points.push(preu + left)",
      "points.push(ovl + left)",
      "points.push(left)",
      "needSync = right >= 0",
      "entry = new Entry(sample, name, start, end, points, extras, new Notes(), needSync)"
    ]
  },
  "writer": {
    "scope": "Entry",
    "format": "{sample}={name},{left},{fixed},{right},{preu},{ovl}"
  },
  "parameters": [
    {
      "parameter": {
        "type": "boolean",
        "name": "useNegativeOvl",
        "label": {
          "en": "Allow negative overlap",
          "zh": "允许重叠为负值",
          "ja": "オーバーラップのマイナス値を許容する"
        },
        "defaultValue": true,
        "required": true
      },
      "injector": [
        "labeler.fields[2].constraints[0].min = value ? null : 3"
      ],
      "changeable": true
    },
    {
      "parameter": {
        "type": "enum",
        "name": "dragBase",
        "label": {
          "en": "Base for fixed-drag",
          "zh": "锁定拖动的基准参数",
          "ja": "連動ドラッグの基準"
        },
        "defaultValue": "Preutterance",
        "options": [
          "Left",
          "Overlap",
          "Preutterance",
          "Fixed"
        ],
        "optionDisplayedNames": [
          {
            "en": "Left",
            "zh": "左边界",
            "ja": "左ブランク"
          },
          {
            "en": "Overlap",
            "zh": "重叠",
            "ja": "オーバーラップ"
          },
          {
            "en": "Preutterance",
            "zh": "先行发声",
            "ja": "先行発声"
          },
          {
            "en": "Fixed",
            "zh": "固定",
            "ja": "固定範囲"
          }
        ]
      },
      "injector": [
        "if (value !== 'Preutterance') {",
        "    labeler.fields[1].dragBase = false",
        "}",
        "if (value === 'Fixed') {",
        "    labeler.fields[0].dragBase = true",
        "}",
        "if (value === 'Overlap') {",
        "    labeler.fields[2].dragBase = true",
        "}",
        "if (value === 'Left') {",
        "    labeler.lockedDrag.useDragBase = false",
        "    labeler.lockedDrag.useStart = true",
        "}"
      ],
      "changeable": true
    },
    {
      "parameter": {
        "type": "enum",
        "name": "postEditNextTrigger",
        "label": {
          "en": "Go to next entry after editing",
          "zh": "编辑后跳转到下一个条目",
          "ja": "編集後に次のエントリーに移動する"
        },
        "description": {
          "en": "Please enable this action in `Preferences` -> `Editor` -> `Post-editing actions`, and choose `Use settings defined by the labeler` as the trigger.",
          "zh": "请在`环境设置`->`编辑器`->`编辑后动作`中启用此功能，并选择`使用标注器的设置`为`触发该行为的参数`。",
          "ja": "`環境設定`->`エディタ`->`編集後アクション`でこの機能を有効にし、`アクションを実行できるパラメータ`では`ラベラーの設定`を選択してください。"
        },
        "defaultValue": "Disable",
        "options": [
          "Disable",
          "Left",
          "Overlap",
          "Preutterance",
          "Fixed",
          "Cutoff",
          "Any"
        ],
        "optionDisplayedNames": [
          {
            "en": "Disable",
            "zh": "禁用",
            "ja": "無効"
          },
          {
            "en": "Left",
            "zh": "左边界",
            "ja": "左ブランク"
          },
          {
            "en": "Overlap",
            "zh": "重叠",
            "ja": "オーバーラップ"
          },
          {
            "en": "Preutterance",
            "zh": "先行发声",
            "ja": "先行発声"
          },
          {
            "en": "Fixed",
            "zh": "固定",
            "ja": "固定範囲"
          },
          {
            "en": "Cutoff",
            "zh": "右边界",
            "ja": "右ブランク"
          },
          {
            "en": "Any",
            "zh": "任意",
            "ja": "任意"
          }
        ]
      },
      "injector": [
        "if (value === 'Left') {",
        "    labeler.postEditNextTrigger = { 'useStart': true }",
        "}",
        "if (value === 'Fixed') {",
        "    labeler.fields[0].triggerPostEditNext = true",
        "}",
        "if (value === 'Preutterance') {",
        "    labeler.fields[1].triggerPostEditNext = true",
        "}",
        "if (value === 'Overlap') {",
        "    labeler.fields[2].triggerPostEditNext = true",
        "}",
        "if (value === 'Cutoff') {",
        "    labeler.postEditNextTrigger = { 'useEnd': true }",
        "}",
        "if (value === 'Any') {",
        "    labeler.postEditNextTrigger = { 'useStart': true, 'useEnd': true }",
        "    labeler.fields[0].triggerPostEditNext = true",
        "    labeler.fields[1].triggerPostEditNext = true",
        "    labeler.fields[2].triggerPostEditNext = true",
        "}"
      ],
      "changeable": true
    },
    {
      "parameter": {
        "type": "enum",
        "name": "postEditDoneTrigger",
        "label": {
          "en": "Mark entry as `Done` after editing",
          "zh": "编辑后标记为已完成条目",
          "ja": "編集後にエントリーを\"完了\"にする"
        },
        "description": {
          "en": "Please enable this action in `Preferences` -> `Editor` -> `Post-editing actions`, and choose `Use settings defined by the labeler` as the trigger.",
          "zh": "请在`环境设置`->`编辑器`->`编辑后动作`中启用此功能，并选择`使用标注器的设置`为`触发该行为的参数`。",
          "ja": "`環境設定`->`エディタ`->`編集後アクション`でこの機能を有効にし、`アクションを実行できるパラメータ`では`ラベラーの設定`を選択してください。"
        },
        "defaultValue": "Any",
        "options": [
          "Disable",
          "Left",
          "Overlap",
          "Preutterance",
          "Fixed",
          "Cutoff",
          "Any"
        ],
        "optionDisplayedNames": [
          {
            "en": "Disable",
            "zh": "禁用",
            "ja": "無効"
          },
          {
            "en": "Left",
            "zh": "左边界",
            "ja": "左ブランク"
          },
          {
            "en": "Overlap",
            "zh": "重叠",
            "ja": "オーバーラップ"
          },
          {
            "en": "Preutterance",
            "zh": "先行发声",
            "ja": "先行発声"
          },
          {
            "en": "Fixed",
            "zh": "固定",
            "ja": "固定範囲"
          },
          {
            "en": "Cutoff",
            "zh": "右边界",
            "ja": "右ブランク"
          },
          {
            "en": "Any",
            "zh": "任意",
            "ja": "任意"
          }
        ]
      },
      "injector": [
        "if (value === 'Disable') {",
        "    labeler.postEditDoneTrigger = {}",
        "    labeler.fields[0].triggerPostEditDone = false",
        "    labeler.fields[1].triggerPostEditDone = false",
        "    labeler.fields[2].triggerPostEditDone = false",
        "}",
        "if (value === 'Left') {",
        "    labeler.postEditDoneTrigger = { 'useStart': true }",
        "    labeler.fields[0].triggerPostEditDone = false",
        "    labeler.fields[1].triggerPostEditDone = false",
        "    labeler.fields[2].triggerPostEditDone = false",
        "}",
        "if (value === 'Fixed') {",
        "    labeler.postEditDoneTrigger = {}",
        "    labeler.fields[1].triggerPostEditDone = false",
        "    labeler.fields[2].triggerPostEditDone = false",
        "}",
        "if (value === 'Preutterance') {",
        "    labeler.postEditDoneTrigger = {}",
        "    labeler.fields[0].triggerPostEditDone = false",
        "    labeler.fields[2].triggerPostEditDone = false",
        "}",
        "if (value === 'Overlap') {",
        "    labeler.postEditDoneTrigger = {}",
        "    labeler.fields[0].triggerPostEditDone = false",
        "    labeler.fields[1].triggerPostEditDone = false",
        "}",
        "if (value === 'Cutoff') {",
        "    labeler.postEditDoneTrigger = { 'useEnd': true }",
        "    labeler.fields[0].triggerPostEditDone = false",
        "    labeler.fields[1].triggerPostEditDone = false",
        "    labeler.fields[2].triggerPostEditDone = false",
        "}"
      ],
      "changeable": true
    }
  ]
}
