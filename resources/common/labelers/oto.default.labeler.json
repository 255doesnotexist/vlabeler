{
  "name": "oto.default",
  "version": 10,
  "extension": "ini",
  "defaultInputFilePath": "oto.ini",
  "displayedName": {
    "en": "UTAU oto labeler",
    "zh": "UTAU oto 标记器",
    "ja": "UTAU oto ラベラー"
  },
  "author": "sdercolin",
  "email": "sder.colin@gmail.com",
  "description": {
    "en": "Default labeler for UTAU oto. Overlap cannot be negative.",
    "zh": "用于 UTAU oto 的默认标记器。`重叠`不能为负值。",
    "ja": "UTAU oto のデフォルトラベラー。Overlap は負の値にできません。"
  },
  "website": "https://github.com/sdercolin/vlabeler/tree/main/resources/common/labelers",
  "defaultValues": [
    100,
    400,
    300,
    200,
    500
  ],
  "defaultExtras": [
    "500"
  ],
  "fields": [
    {
      "name": "fixed",
      "label": {
        "en": "Fixed",
        "zh": "固",
        "ja": "子"
      },
      "color": "#1b51ff",
      "height": 0.5,
      "dragBase": false,
      "filling": "start",
      "constraints": [],
      "shortcutIndex": 3
    },
    {
      "name": "preu",
      "label": {
        "en": "Preu",
        "zh": "先",
        "ja": "先"
      },
      "color": "#ff1a45",
      "height": 0.6667,
      "dragBase": true,
      "filling": null,
      "constraints": [
        {
          "min": null,
          "max": 0
        }
      ],
      "shortcutIndex": 2
    },
    {
      "name": "ovl",
      "label": {
        "en": "Ovl",
        "zh": "重",
        "ja": "オ"
      },
      "color": "#7fff39",
      "height": 0.8333,
      "dragBase": false,
      "filling": null,
      "constraints": [
        {
          "min": null,
          "max": 0
        }
      ],
      "shortcutIndex": 1
    }
  ],
  "extraFieldNames": [
    "rawRight"
  ],
  "lockedDrag": {
    "useDragBase": true,
    "useStart": false
  },
  "overflowBeforeStart": "AdjustPoint",
  "overflowAfterEnd": "AdjustBorder",
  "properties": [
    {
      "name": "left",
      "displayedName": {
        "en": "Offset",
        "zh": "左边界",
        "ja": "左ブランク"
      },
      "value": "{start}"
    },
    {
      "name": "ovl",
      "displayedName": {
        "en": "Overlap",
        "zh": "重叠",
        "ja": "Overlap"
      },
      "value": "{ovl} - {start}"
    },
    {
      "name": "preu",
      "displayedName": {
        "en": "Preutterance",
        "zh": "先行发声",
        "ja": "先行発声"
      },
      "value": "{preu} - {start}"
    },
    {
      "name": "fixed",
      "displayedName": {
        "en": "Fixed",
        "zh": "固定",
        "ja": "固定範囲"
      },
      "value": "{fixed} - {start}"
    },
    {
      "name": "right",
      "displayedName": {
        "en": "Cutoff",
        "zh": "右边界",
        "ja": "右ブランク"
      },
      "value": "{end} > 0 ? {start} - {end} : parseFloat({rawRight})"
    }
  ],
  "parser": {
    "defaultEncoding": "Shift-JIS",
    "extractionPattern": "(.*)\\.wav=(.*),(.*),(.*),(.*),(.*),(.*)",
    "variableNames": [
      "sample",
      "name",
      "left",
      "fixed",
      "right",
      "preu",
      "ovl"
    ],
    "scripts": [
      "if (!name) {",
      "    name = sample",
      "}",
      "if (left !== '') {",
      "    start = parseFloat(left)",
      "}",
      "points = []",
      "extras = []",
      "if (fixed !== '') {",
      "    fixed = parseFloat(fixed)",
      "    if (fixed < 0) {",
      "        fixed = 0",
      "    }",
      "    points.push(fixed + start)",
      "}",
      "if (right !== '') {",
      "    right = parseFloat(right)",
      "    rawRight = right // for restoring from a non-negative value (distance to sample end)",
      "    extras.push(rawRight)",
      "    if (right < 0) {",
      "        end = start - right",
      "    } else {",
      "        end = -right",
      "    }",
      "}",
      "if (preu !== '') {",
      "    preu = parseFloat(preu)",
      "    if (preu < 0) {",
      "        preu = 0",
      "    }",
      "    points.push(preu + start)",
      "}",
      "if (ovl !== '') {",
      "    ovl = parseFloat(ovl)",
      "    if (ovl < 0) {",
      "        ovl = 0",
      "    }",
      "    points.push(ovl + start)",
      "}",
      "for (var point of points) {",
      "    if (end < point) {",
      "        end = point",
      "    }",
      "}"
    ]
  },
  "writer": {
    "format": "{sample}.wav={name},{left},{fixed},{right},{preu},{ovl}"
  }
}
