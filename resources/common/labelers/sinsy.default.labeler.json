{
  "name": "sinsy.default",
  "version": 10,
  "extension": "lab",
  "defaultInputFilePath": null,
  "displayedName": {
    "en": "Sinsy lab labeler",
    "zh": "Sinsy lab 标注器",
    "ja": "Sinsy lab ラベラー"
  },
  "author": "sdercolin",
  "email": "sder.colin@gmail.com",
  "description": {
    "en": "Default labeler for lab file in Sinsy's standard.",
    "zh": "用于 Sinsy 规范的 lab 文件的默认标注器。",
    "ja": "Sinsy の標準の lab ファイルのデフォルトラベラーです。"
  },
  "website": "https://github.com/sdercolin/vlabeler/tree/main/resources/common/labelers",
  "continuous": true,
  "allowSameNameEntry": true,
  "defaultValues": [
    0,
    0
  ],
  "defaultExtras": [],
  "fields": [],
  "extraFieldNames": [],
  "lockedDrag": {
    "useDragBase": false,
    "useStart": false
  },
  "decimalDigit": 4,
  "properties": [
    {
      "name": "start",
      "displayedName": "Start",
      "valueGetter": [
        "value = entry.start"
      ],
      "valueSetter": [
        "entry.start = value"
      ],
      "shortcutIndex": 0
    },
    {
      "name": "end",
      "displayedName": "End",
      "valueGetter": [
        "value = entry.end"
      ],
      "valueSetter": [
        "entry.end = value"
      ],
      "shortcutIndex": 1
    }
  ],
  "parser": {
    "scope": "Entry",
    "defaultEncoding": "UTF-8",
    "extractionPattern": "(.*) (.*) (.*)",
    "variableNames": [
      "left",
      "right",
      "name"
    ],
    "scripts": [
      "if (inputFileNames[0]) {",
      "    let inputFileNameWithoutExtension = getNameWithoutExtension(inputFileNames[0])",
      "    for (sampleFileName of sampleFileNames) {",
      "        let sampleFileNameWithoutExtension = getNameWithoutExtension(sampleFileName)",
      "        if (sampleFileNameWithoutExtension === inputFileNameWithoutExtension) {",
      "            sample = sampleFileName",
      "            break",
      "        }",
      "    }",
      "}",
      "if (!sample) {",
      "    sample = sampleFileNames[0]",
      "}",
      "start = parseFloat(left) / 10000",
      "end = parseFloat(right) / 10000",
      "entry = new Entry(sample, name, start, end, [], [])"
    ]
  },
  "writer": {
    "scope": "Entry",
    "scripts": [
      "output = (start * 10000).toFixed() + \" \" + (end * 10000).toFixed() + \" \"+ name"
    ]
  }
}
