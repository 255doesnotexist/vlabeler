{
  "name": "utau-singer.default",
  "version": 1,
  "extension": "ini",
  "displayedName": {
    "en": "UTAU singer labeler",
    "zh": "UTAU singer 标记器",
    "ja": "UTAU singer ラベラー"
  },
  "author": "sdercolin",
  "email": "sder.colin@gmail.com",
  "description": {
    "en": "Default labeler for UTAU singer (multiple pitches).",
    "zh": "用于 UTAU singer（多音阶）的默认标记器。",
    "ja": "UTAU singer（多音階）のデフォルトラベラー。"
  },
  "website": "https://github.com/sdercolin/vlabeler/tree/main/resources/common/labelers",
  "defaultValues": [
    100,
    400,
    300,
    200,
    100,
    500
  ],
  "defaultExtras": [
    "500"
  ],
  "fields": [
    {
      "name": "fixed",
      "label": {
        "en": "Fixed",
        "zh": "固",
        "ja": "子"
      },
      "color": "#1b51ff",
      "height": 0.5,
      "dragBase": false,
      "filling": "left",
      "constraints": [
        {
          "min": 3,
          "max": null
        }
      ],
      "shortcutIndex": 3
    },
    {
      "name": "preu",
      "label": {
        "en": "Preu",
        "zh": "先",
        "ja": "先"
      },
      "color": "#ff1a45",
      "height": 0.6667,
      "dragBase": true,
      "filling": null,
      "constraints": [
        {
          "min": 3,
          "max": 0
        }
      ],
      "shortcutIndex": 2
    },
    {
      "name": "ovl",
      "label": {
        "en": "Ovl",
        "zh": "重",
        "ja": "オ"
      },
      "color": "#7fff39",
      "height": 0.8333,
      "dragBase": false,
      "filling": null,
      "constraints": [
        {
          "min": null,
          "max": 0
        }
      ],
      "shortcutIndex": 1
    },
    {
      "name": "left",
      "label": {
        "en": "Left",
        "zh": "左",
        "ja": "左"
      },
      "color": "#9c7212",
      "height": 0.9,
      "dragBase": false,
      "filling": "start",
      "constraints": [],
      "replaceStart": true
    }
  ],
  "extraFieldNames": [
    "rawRight"
  ],
  "lockedDrag": {
    "useDragBase": true,
    "useStart": false
  },
  "overflowBeforeStart": "AdjustPoint",
  "overflowAfterEnd": "AdjustBorder",
  "properties": [
    {
      "name": "left",
      "displayedName": {
        "en": "Offset",
        "zh": "左边界",
        "ja": "左ブランク"
      },
      "value": "{left}"
    },
    {
      "name": "ovl",
      "displayedName": {
        "en": "Overlap",
        "zh": "重叠",
        "ja": "Overlap"
      },
      "value": "{ovl} - {left}"
    },
    {
      "name": "preu",
      "displayedName": {
        "en": "Preutterance",
        "zh": "先行发声",
        "ja": "先行発声"
      },
      "value": "{preu} - {left}"
    },
    {
      "name": "fixed",
      "displayedName": {
        "en": "Fixed",
        "zh": "固定",
        "ja": "固定範囲"
      },
      "value": "{fixed} - {left}"
    },
    {
      "name": "right",
      "displayedName": {
        "en": "Cutoff",
        "zh": "右边界",
        "ja": "右ブランク"
      },
      "value": "{end} > 0 ? {left} - {end} : parseFloat({rawRight})"
    }
  ],
  "parser": {
    "defaultEncoding": "Shift-JIS",
    "extractionPattern": "(.*)=(.*),(.*),(.*),(.*),(.*),(.*)",
    "variableNames": [
      "sample",
      "name",
      "left",
      "fixed",
      "right",
      "preu",
      "ovl"
    ],
    "scripts": [
      "if (!name) {",
      "    name = getNameWithoutExtension(sample)",
      "}",
      "offset = 0",
      "if (ovl !== '') {",
      "    ovl = parseFloat(ovl)",
      "    if (ovl < 0) {",
      "        offset = -ovl",
      "    }",
      "}",
      "if (left !== '') {",
      "    left = parseFloat(left)",
      "    start = left - offset",
      "}",
      "points = []",
      "extras = []",
      "if (fixed !== '') {",
      "    fixed = parseFloat(fixed)",
      "    if (fixed < 0) {",
      "        fixed = 0",
      "    }",
      "    points.push(fixed + left)",
      "}",
      "if (right !== '') {",
      "    right = parseFloat(right)",
      "    rawRight = right // for restoring from a non-negative value (distance to sample end)",
      "    extras.push(rawRight)",
      "    if (right < 0) {",
      "        end = left - right",
      "    } else {",
      "        end = -right",
      "    }",
      "}",
      "if (preu !== '') {",
      "    preu = parseFloat(preu)",
      "    if (preu < 0) {",
      "        preu = 0",
      "    }",
      "    points.push(preu + left)",
      "}",
      "if (ovl !== '') {",
      "    points.push(ovl + left)",
      "}",
      "if (left !== '') {",
      "    points.push(left)",
      "}"
    ]
  },
  "writer": {
    "format": "{sample}={name},{left},{fixed},{right},{preu},{ovl}"
  },
  "parameters": [
    {
      "parameter": {
        "type": "boolean",
        "name": "useNegativeOvl",
        "label": {
          "en": "Allow negative overlap",
          "zh": "允许重叠为负值",
          "ja": "負の Overlap を許容する"
        },
        "defaultValue": true,
        "required": true
      },
      "injector": [
        "labeler.fields[2].constraints[0].min = value ? null : 3"
      ]
    },
    {
      "parameter": {
        "type": "enum",
        "name": "dragBase",
        "label": {
          "en": "Base for fixed-drag",
          "zh": "锁定拖动的基准参数",
          "ja": "連動ドラッグの基準"
        },
        "defaultValue": "Preutterance",
        "options": [
          "Left",
          "Overlap",
          "Preutterance",
          "Fixed"
        ],
        "optionDisplayedNames": [
          {
            "en": "Left",
            "zh": "左边界",
            "ja": "左ブランク"
          },
          {
            "en": "Overlap",
            "zh": "重叠",
            "ja": "Overlap"
          },
          {
            "en": "Preutterance",
            "zh": "先行发声",
            "ja": "先行発声"
          },
          {
            "en": "Fixed",
            "zh": "固定",
            "ja": "固定範囲"
          }
        ]
      },
      "injector": [
        "if (value !== 'Preutterance') {",
        "    labeler.fields[1].dragBase = false",
        "}",
        "if (value === 'Fixed') {",
        "    labeler.fields[0].dragBase = true",
        "}",
        "if (value === 'Overlap') {",
        "    labeler.fields[2].dragBase = true",
        "}",
        "if (value === 'Left') {",
        "    labeler.lockedDrag.useDragBase = false",
        "    labeler.lockedDrag.useStart = true",
        "}"
      ]
    }
  ],
  "projectConstructor": {
    "scripts": [
      "// `root` is the input File object indicating the root sample directory.",
      "// `acceptedSampleExtensions` is provided as list of strings indicating the accepted extensions of sample files",
      "let subFolders = root.listChildDirectories()",
      "let modules = []",
      "for (subFolder of subFolders) {",
      "    let samples = subFolder.listChildFiles().filter(file => acceptedSampleExtensions.includes(file.getExtension()))",
      "    if (samples.length > 0) {",
      "        let otoPath = subFolder.resolve(\"oto.ini\").getAbsolutePath()",
      "        modules.push(",
      "                new ModuleDefinition(",
      "                        subFolder.getName(),",
      "                        subFolder.getAbsolutePath(),",
      "                        samples.map(f => f.getName()),",
      "                        [otoPath],",
      "                        otoPath",
      "                )",
      "        );",
      "    }",
      "}"
    ]
  }
}
